import { getSession } from "next-auth/react";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  // 1. 서버에서 현재 로그인된 세션 정보 가져오기
  const session = await getSession({ req });
  if (!session) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  // 2. NextAuth를 통해 발급받은 액세스 토큰 사용
  const accessToken = session.accessToken;
  const { playlistName, videoIds } = req.body; // 클라이언트에서 보낸 데이터

  if (!playlistName || !videoIds || videoIds.length === 0) {
    return res
      .status(400)
      .json({ message: "Playlist name and video IDs are required." });
  }

  try {
    // 3. YouTube API 호출: 재생목록 생성
    const createPlaylistResponse = await fetch(
      "https://www.googleapis.com/youtube/v3/playlists?part=snippet,status",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          snippet: {
            title: playlistName,
            description: "Generated by Cloudy Player",
          },
          status: {
            privacyStatus: "private", // or 'public', 'unlisted'
          },
        }),
      }
    );

    const newPlaylist = await createPlaylistResponse.json();
    if (!createPlaylistResponse.ok) throw newPlaylist;

    const playlistId = newPlaylist.id;

    // 4. 생성된 재생목록에 비디오 추가 (반복 호출)
    for (const videoId of videoIds) {
      await fetch(
        "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            snippet: {
              playlistId: playlistId,
              resourceId: {
                kind: "youtube#video",
                videoId: videoId,
              },
            },
          }),
        }
      );
    }

    return res.status(200).json({
      message: "Playlist created successfully!",
      playlistId: playlistId,
      playlistUrl: `https://www.youtube.com/playlist?list=${playlistId}`,
    });
  } catch (error) {
    console.error("Error saving playlist to YouTube:", error);
    return res.status(500).json({
      message: "Failed to save playlist to YouTube.",
      error: error.error?.message || error,
    });
  }
}
